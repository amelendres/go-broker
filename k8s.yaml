# Kubernetes ConfigMap, Secret, Deployment and Service for the golang sse service
# that is proxied by nginx to provide http2 support.
#proxy_pass http://127.0.0.1:8080;

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginxconf
data:
  nginx-selfsigned.crt: |
    -----BEGIN CERTIFICATE-----
    MIIDjjCCAnYCCQC+gyI/HQh8dzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMC
    ZXMxEjAQBgNVBAgMCWJhcmNlbG9uYTESMBAGA1UEBwwJYmFyY2Vsb25hMQ0wCwYD
    VQQKDARhcHRvMQ0wCwYDVQQLDARhcHRvMRIwEAYDVQQDDAlsb2NhbGhvc3QxHzAd
    BgkqhkiG9w0BCQEWEGFsZnJlZG9AYXB0by5kZXYwHhcNMjAxMTA2MTU0NzQ1WhcN
    MjExMTA2MTU0NzQ1WjCBiDELMAkGA1UEBhMCZXMxEjAQBgNVBAgMCWJhcmNlbG9u
    YTESMBAGA1UEBwwJYmFyY2Vsb25hMQ0wCwYDVQQKDARhcHRvMQ0wCwYDVQQLDARh
    cHRvMRIwEAYDVQQDDAlsb2NhbGhvc3QxHzAdBgkqhkiG9w0BCQEWEGFsZnJlZG9A
    YXB0by5kZXYwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDM7yPzIGcw
    ZAUVV+CLTkiDKmrTP8vPoA2vDzDkvtzd5xUTiExBXeHv0S/Smu3OkLqChbhInN44
    ejmWDGNgTgKf8V+nI8ciofcHwoqzevXAb+p6fGTbtQVpY0nC4CaBuUJty90nSyef
    NqyujLUugQYlrmUTGK7ktfHnJPn+8sfML48JMq0S0Sv0hOyiOBmkaSdXWZnW6FoJ
    XW4BXUIxo+743i242+v2IbTMuvJ22yb/s7J+VIY+Y5pPVc+Y1QOnzPqACrbliFOp
    Xla4CsCnfXykEyJvNzdDOZnHtIYzVhHwmTxaihgVhRb+30CX20LQhbPXFZdC2jyV
    N/PVTPevT8u1AgMBAAEwDQYJKoZIhvcNAQELBQADggEBAGlD0pAKngj+Pz7EJQQL
    WFcaLS4BIzwuPP1V5AQWKdKJZdR4/OLTfUu3iCPuT0LOOlUKQ926ik/9lnCHgbq+
    UOBY3/9zqs2sOLTipQmlI7Aa86iR641FbtPJRiP9yNQ064etvvroQxr4OPSVEsMD
    JbvtXiMZTDhJX9yqhR49/SR1Ugdbks8MvgZR7nQpeEc574LvZM1xL3H2FEWSd8Nu
    wZAhWCtqCXO0NjL+M8ans3gzz1wgc0Kgw0jaYCpyh7tuLrD5SfaK6OlGuPn2KEZN
    HxpFyJ4ZHPtaM7oEj+LoFa0TdN6wWCpqkD0e+xD2nRWJuNTHKE/3SS8Rcc1SFwTr
    2Wk=
    -----END CERTIFICATE-----

  default.conf: |
      server {
            listen 443 ssl http2;
            ssl_certificate /etc/nginx/conf.d/nginx-selfsigned.crt;
            ssl_certificate_key /etc/nginx/conf.d/private/nginx-selfsigned.key;

            server_name  localhost;

            location / {
                  if ($http_x_forwarded_proto = 'http') {
                      return 301 https://$server_name$request_uri;   
                  }
                  proxy_pass http://localhost:8080/;
                  proxy_set_header Connection '';
                  proxy_http_version 1.1;
                  chunked_transfer_encoding off;
                  proxy_buffering off;
                  proxy_cache off;
              }
      }
---
apiVersion: v1
kind: Secret
metadata:
  name: nginxkey
data:
  nginx-selfsigned.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2d0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktrd2dnU2xBZ0VBQW9JQkFRRE03eVB6SUdjd1pBVVYKVitDTFRraURLbXJUUDh2UG9BMnZEekRrdnR6ZDV4VVRpRXhCWGVIdjBTL1NtdTNPa0xxQ2hiaEluTjQ0ZWptVwpER05nVGdLZjhWK25JOGNpb2ZjSHdvcXpldlhBYitwNmZHVGJ0UVZwWTBuQzRDYUJ1VUp0eTkwblN5ZWZOcXl1CmpMVXVnUVlscm1VVEdLN2t0ZkhuSlBuKzhzZk1MNDhKTXEwUzBTdjBoT3lpT0Jta2FTZFhXWm5XNkZvSlhXNEIKWFVJeG8rNzQzaTI0Mit2MkliVE11dkoyMnliL3M3SitWSVkrWTVwUFZjK1kxUU9uelBxQUNyYmxpRk9wWGxhNApDc0NuZlh5a0V5SnZOemRET1puSHRJWXpWaEh3bVR4YWloZ1ZoUmIrMzBDWDIwTFFoYlBYRlpkQzJqeVZOL1BWClRQZXZUOHUxQWdNQkFBRUNnZ0VCQUlhV0J1WUV3Yi9sNy9DMFphTVhKa2Y5ODJvSTI3RGZUQjFMdkxCOUtGQVQKRXFSaFByTXZGTktLYnYzQkFheEhJRFhYMjg3VU5weWdxSEVDY2NFdGVrdlFHU0dMUFp4aEFmcjJxR0Iyd0M1QgpVWnhmVlYxMDVManhtOTkvbGNwY0FHUmJIa0pQK1JWMnNyRnZkdzJ6Ym5ZUXNoQjRoV051bWc5VEdWdDExZ0VoCmpkTzRkYjBOVjZYYXc4anRpREJoZllpcWN3ZHZMMGhweE15WmNaYXEyRVhUTVNueDFma1pkOVJJSkNUUW9tNisKSDkzcXpMblJVV1RUbzhsdnlqMEEyT3lidFpzZ1FrQzhoVDI1N0ZQMENRNHhYenFFbXlmUzNuWUMrVkNVTi9uSAphN2pzR28wNFMrYzk4Ry80bisybzg1ditnMGtKQjJTNTZvVC9SL1I0QllFQ2dZRUE1a3Y5L21aNDk5bmp2YUFDCjhDNXpMNnEvVDFhUkRuUGJNc25vMnZtNlVYR3Y5VS9jcDlCVEhqN0JIZmhlMzFoWHhhdWFiV0FHY1RnS2Q0S2gKT0lxdUZWSUZ1c012UVFURHYvd2dUcXJHaXU1T2tTeUNONnVsYU4vL0x3Q1Q3TndGSWdBMGJBQVdwYWZKbm83UQphUjV6VzNPWnlPMkxmYUFWWjJIbm42bGdkKzhDZ1lFQTQ4NTlKTDQzdVRsYXM5Y1d6QVRZTVVrQ25yYVN2QjhwCmRQSCtOMWsrQ1BmS1dTb3JPK1h6KzdzVjJySzBNZldWVWJsWldBZy95RVR4MWVwUEZhWVllOWcvQmhZSlZwWWwKVHFHbmsvbDZEZzUvTksvdnJ0RDUrNDhCQUt1S1UzQlN5UlAxb0xRTzc0amt4RFo2ZTNGT0drOWtCTGxac0FlVwo4VldsT0I2dHNwc0NnWUVBakxRM1BmeUx3aHF0QzBrOUlsT3U2cHV2QVNGSnhRUENGQmpLblNkZ3o2dmZMc2taCmJxcFliaTAzUGtGbWJaMERHM0dLQzNOVTNFMjZEMlNQYmdWRThSL0pBbCtJZW5nWHhTK2M2Wk5yZEt5KzhmRzQKcVp6RWxmdnRaR0U4LzhVNW1abDRiZGZyL2xBeVhoNnhkTmcyOE5RRFRJRGQ3ZVlsemFGQ3JBa0hPSjhDZ1lBcQo1TktEZkoyWmJzYzVYYUtaUDhCRloyM3EzSTI4aGxHVUI0ektkeTlMR1AwczFOZlhLM0ZKVU96SWhTV1EwcUVQCkJrdGdYQTFHZEZUazVuMkZvZ1N5TFFHUTc4MUtWSE1wM3g1aXFuTGsrcTNSQ2Qramx3MjY1QzVZSmZTaHlXQ04KSkFqMy9XOWlndkF3VWVHMkpKdUVNTGF3ZlFYNk16T2t0VytxcFh3blNRS0JnUUNiRFVFWGhueEZIbE9rQlhyTQpESWJrTnlPbEVYM05KcFlKVkh4SldTMVN1YjAvSlQ5STdKRDRDOW16MkFNRlpUNms2WmxkYStiUlV4ejR1UldiCm1pV2N3WExhekNxQzhKRlBmUWN1Q0tEWkZyZC9qMGNOalo5R29DbXU4d2s4RUhTVHdEeTVQNjA4bFV4aEFFazgKdSt1dFZqUEpQSERRTkhEYkN0NWpmUGtrTUE9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gosse
  name: gosse-broker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gosse
  template:
    metadata:
      labels:
        app: gosse
    spec:
      containers:
        - image: amelendres/gosse
          name: gosse
          ports:
            - containerPort: 8080
        - image: nginx
          name: nginx
          ports:
            - containerPort: 443
          volumeMounts:
            - name: nginxconf-vol
              mountPath: /etc/nginx/conf.d/
            - name: nginxkey-vol
              mountPath: /etc/nginx/conf.d/private/
      volumes:
        - name: nginxconf-vol
          configMap:
            name: nginxconf
        - name: nginxkey-vol
          secret:
            secretName: nginxkey
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gosse
  name: gosse-service
spec:
  selector:
    app: gosse
  type: NodePort
  ports:
    - name: 443-port
      port: 1443
      protocol: TCP
      targetPort: 443
      nodePort: 30007

